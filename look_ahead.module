<?php
function look_ahead_theme_registry_alter(&$registry) {
  // Save previous value from registry in case another module/theme overwrites theme_menu_link() as well.
  $registry['look_ahead_menu_link_default'] = $registry['menu_link'];
  $registry['menu_link']['function'] = 'look_ahead_menu_link';
}

/**
 * Implementation of hook_menu().
 */
function look_ahead_menu() {
  $items['admin/config/user-interface/look-ahead'] = array(
    'title' => t('Look ahead'),
    'description' => t('Configure how content should be attached to menu items.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('look_ahead_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'look_ahead.admin.inc',
  );

  $items['look_ahead/ajax'] = array(
    'title' => 'Render a look-ahead entity',
    'access arguments' => array('access content'),
    'page callback' => 'look_ahead_render_ajax',
    //'page argumets' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items['<lookahead>'] = array(
    'page callback' => 'drupal_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_preprocess_node().
 */
function look_ahead_preprocess_node(&$vars) {
  __look_ahead_preprocess_entity($vars, 'node', $vars['type']);
}

function look_ahead_preprocess_taxonomy_term(&$vars) {
  __look_ahead_preprocess_entity($vars, 'taxonomy_term', $vars['term']->vocabulary_machine_name);
}

function __look_ahead_preprocess_entity(&$vars, $entity_type, $preprocess_identifiers = array()) {
  $my_data = &drupal_static(__FUNCTION__);
  if (!isset($my_data)) {
    $my_data['entity_types'] = variable_get('look_ahead_entity_types_enabled', array());
  }

  if (in_array($entity_type, $my_data['entity_types'])) {
    if ($vars['view_mode'] == 'look_ahead') {
      $vars['theme_hook_suggestions'][] = $entity_type . '__look_ahead';

      foreach ((array) $preprocess_identifiers as $identifier) {
        $vars['theme_hook_suggestions'][] = $entity_type . '__' . $identifier . '__look_ahead';
      }
    }
  }
}

function look_ahead_entity_info_alter(&$entity_info) {
  $my_data = &drupal_static(__FUNCTION__);
  if (!isset($my_data)) {
    $my_data['entity_types'] = variable_get('look_ahead_entity_types_enabled', array());
  }

  $view_mode = array(
    'label' => t('Look-ahead'),
    'custom settings' => FALSE,
  );

  foreach ($my_data['entity_types'] as $entity_type) {
    if (!array_key_exists($entity_type, $entity_info)) {
      continue;
    }

    $entity_info[$entity_type]['view modes']['look_ahead'] = $view_mode;
  }
}

function look_ahead_static_cache_uri($entity_type = NULL, $eid = NULL) {
  $my_data = &drupal_static(__FUNCTION__);
  if (!isset($my_data)) {
    $my_data['static_cache_dir'] = variable_get('look_ahead_static_cache_dir', 'look_ahead_cache');
  }

  $path = $my_data['static_cache_dir'];

  if (!empty($entity_type)) {
    $path .= "/$entity_type";
  }

  if (!empty($eid)) {
    $path .= "/$eid.html";
  }

  return file_build_uri($path);
}

function _look_ahead_should_render_link($link) {
  $my_data = &drupal_static(__FUNCTION__);
  if (!isset($my_data)) {
    $my_data['enabled_menus'] = array_filter(variable_get('look_ahead_menus_enabled', array()));
    $my_data['enabled'] = variable_get('look_ahead_enabled', TRUE);
  }

  $options = array();
  if (isset($link['#localized_options'])) {
    $options = $link['#localized_options'];
  } elseif (isset($link['options'])) {
    $options = $link['options'];
  }

  if (!$my_data['enabled'] || empty($options['look_ahead'])) {
    return FALSE;
  }

  $options = $options['look_ahead'];

  if (empty($options['enabled']) || !$options['enabled']) {
    return FALSE;
  }

  if (empty($options['entity_type']) || !__look_ahead_entity_type_is_enabled($options['entity_type'])) {
    return FALSE;
  }

  if (empty($options['menu_name']) || !in_array($options['menu_name'], $my_data['enabled_menus'])) {
    return FALSE;
  }

  return TRUE;
}

function look_ahead_menu_link(array $variables) {
  $my_data = &drupal_static(__FUNCTION__);
  if (!isset($my_data)) {
    $my_data['ajax'] = variable_get('look_ahead_ajax', FALSE);
    $my_data['static_cache'] = variable_get('look_ahead_static_cache', FALSE);
  }

  if (!_look_ahead_should_render_link($variables['element'])) {
    return theme('look_ahead_menu_link_default', $variables);
  }

  $options = $variables['element']['#localized_options'];

  if ($my_data['ajax']) {
    drupal_add_js(drupal_get_path('module', 'look_ahead') .'/look_ahead.js');

    $options['attributes']['class'][] = 'look-ahead';

    if ($my_data['static_cache']) {
      $cache_file = look_ahead_static_cache_uri($options['look_ahead']['entity_type'], $options['look_ahead']['eid']);
      $path = drupal_realpath($cache_file);

      if (!file_exists($path)) {
        look_ahead_build_static_cache(array($options['look_ahead']['entity_type'] => array($options['look_ahead']['eid'])));
      }

      $url = file_create_url($cache_file);
    } else {
      $path = 'look_ahead/ajax/'.$options['look_ahead']['entity_type'].'/'.$options['look_ahead']['eid'];
      $url = url($path, array('absolute' => TRUE));
    }

    $options['attributes']['data-look-ahead'] = $url;
  }

  $output = l($variables['element']['#title'], $variables['element']['#href'], $options);

  if (!$my_data['ajax']) {
    $output .= look_ahead_render($options['look_ahead']['entity_type'], $options['look_ahead']['eid']);
  }

  return '<li' . drupal_attributes($variables['element']['#attributes']) . '>' . $output . "</li>\n";
}

function _look_ahead_get_all_enabled_entity_ids() {
  $my_data = &drupal_static(__FUNCTION__);
  if (!isset($my_data)) {
    $my_data['enabled_menus'] = array_filter(variable_get('look_ahead_menus_enabled', array()));
    $my_data['entities'] = array();

    foreach ($my_data['enabled_menus'] as $menu) {
      $links = menu_load_links($menu);

      foreach ($links as $link) {
        if (_look_ahead_should_render_link($link)) {
          $my_data['entities'][$link['options']['look_ahead']['entity_type']][] = $link['options']['look_ahead']['eid'];
        }
      }
    }
  }

  return $my_data['entities'];
}

function look_ahead_clear_static_cache() {
  $existing_dirs = file_scan_directory(look_ahead_static_cache_uri(), '/^.+$/');

  foreach ($existing_dirs as $dir) {
    $existing_files = file_scan_directory($dir->uri, '/^[0-9]+\.html$/');

    foreach ($existing_files as $file) {
      file_unmanaged_delete($file->uri);
    }
  }
}

function look_ahead_build_static_cache($entities = array()) {
  $my_data = &drupal_static(__FUNCTION__);
  if (!isset($my_data)) {
    $my_data['static_cache_dir'] = variable_get('look_ahead_static_cache_dir', 'look_ahead_cache');
  }

  $entities = (array) $entities;

  if (empty($entities)) {
    // Clear all existing cache files, then get an array of all NIDs that should have cache files generated
    look_ahead_clear_static_cache();

    $entities = _look_ahead_get_all_enabled_entity_ids();
  }

  $dir = look_ahead_static_cache_uri();

  if (!file_prepare_directory($dir, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS)) {
    watchdog('Look ahead', 'Static cache directory %dir cannot be written to.', array('%dir' => $dir), WATCHDOG_ALERT);

    return;
  }

  foreach ($entities as $entity_type => $eids) {
    $dir = look_ahead_static_cache_uri($entity_type);

    if (!file_prepare_directory($dir, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS)) {
      watchdog('Look ahead', 'Static cache directory %dir cannot be written to.', array('%dir' => $dir), WATCHDOG_ALERT);

      continue;
    }

    foreach ($eids as $eid) {
      $entity = look_ahead_render($entity_type, $eid);

      $file = drupal_realpath(look_ahead_static_cache_uri($entity_type, $eid));

      file_unmanaged_save_data($entity, $file, FILE_EXISTS_REPLACE);
    }
  }
}

function look_ahead_render_ajax($entity_type = NULL, $eid = NULL) {
  if ($entity_type == NULL || $eid == NULL) {
    print '';
  } else {
    print look_ahead_render($entity_type, $eid);
  }

  exit;
}

function look_ahead_render($entity_type, $eid) {
  $my_data = &drupal_static(__FUNCTION__);
  if (!isset($my_data[$entity_type][$eid])) {
    if ($cache = cache_get("$entity_type.$eid", 'cache_look_ahead')) {
      $my_data[$entity_type][$eid] = $cache->data;
    } else {
      $entities = entity_load($entity_type, array($eid));

      if (isset($entities[$eid])) {
        $entity = $entities[$eid];

        cache_set("$entity_type.$eid", $entity, 'cache_look_ahead');

        $my_data[$entity_type][$eid] = $entity;
      }
    }
  }

  if (!isset($my_data[$entity_type][$eid])) {
    return "";
  }

  $entity = $my_data[$entity_type][$eid];

  $rendered_entity = '';

  $type = '';
  if ($entity_type == 'taxonomy_term') {
    $type = $entity->vocabulary_machine_name;
  } elseif (!empty($entity->type)) {
    $type = $entity->type;
  }

  $bundle_settings = field_bundle_settings($entity_type, $type);

  if (isset($bundle_settings['view_modes']['look_ahead'])) {
    $view_mode = $bundle_settings['view_modes']['look_ahead'];

    if ($view_mode['custom_settings'] == TRUE) {
      $rendered_entity = '<ul><li>'.drupal_render(entity_view($entity_type, array($entity), 'look_ahead')).'</li></ul>';
    }
  }

  return $rendered_entity;
}

function __look_ahead_get_eid($entity, $entity_type = NULL) {
  $eid = NULL;

  $entity_type_map = array(
    'node' => 'nid',
    'taxonomy_term' => 'tid',
  );

  if (!empty($entity_type)
    && array_key_exists($entity_type, $entity_type_map)
    && isset($entity->{$entity_type_map[$entity_type]})) {
      $eid = $entity->{$entity_type_map[$entity_type]};
  }

  $eid_properties = array('eid', 'tid', 'nid');

  if (empty($eid)) {
    foreach ($eid_properties as $property) {
      if (isset($entity->$property)) {
        $eid = $entity->$property;
        break;
      }
    }
  }

  return $eid;
}

function look_ahead_entity_update($entity, $type) {
  $my_data = &drupal_static(__FUNCTION__);
  if (!isset($my_data)) {
    $my_data['static_cache'] = variable_get('look_ahead_static_cache', 'false');
  }

  if (!__look_ahead_entity_type_is_enabled($type)) {
    return;
  }

  $eid = __look_ahead_get_eid($entity, $type);

  if (empty($eid)) {
    return;
  }

  cache_clear_all("$type.$eid", 'cache_look_ahead');

  if ($my_data['static_cache']) {
    look_ahead_build_static_cache(array($type => array($eid)));
  }

  kpr('Cleared cache for look-ahead entity of type ' . $type . ' with id ' . $eid);
}

function look_ahead_node_type_update($info) {
  __look_ahead_entity_type_update('node', $info);
}

function look_ahead_taxonomy_vocabulary_update($vocabulary) {
  __look_ahead_entity_type_update('taxonomy_vocabulary', $vocabulary);
}

function __look_ahead_entity_type_update($entity_type, $entity_info) {
  $my_data = &drupal_static(__FUNCTION__);
  if (!isset($my_data)) {
    $my_data['static_cache'] = variable_get('look_ahead_static_cache', 'false');
  }

  if (!__look_ahead_entity_type_is_enabled($entity_type)) {
    return;
  }

  cache_clear_all($entity_type . '.', 'cache_look_ahead', TRUE);

  if ($my_data['static_cache']) {
    look_ahead_build_static_cache();
  }
}

function look_ahead_flush_caches() {
  $my_data = &drupal_static(__FUNCTION__);
  if (!isset($my_data)) {
    $my_data['static_cache'] = variable_get('look_ahead_static_cache', 'false');
  }

  if ($my_data['static_cache']) {
    look_ahead_build_static_cache();
  }

  return array('cache_look_ahead');
}

function look_ahead_form_menu_overview_form_alter(&$form, &$form_state) {
  $elements = element_children($form);

  foreach ($elements as $mlid) {
    $element = &$form[$mlid];

    $eid = NULL;

    if (isset($element['#item'])) {
      $item = &$element['#item'];
      $options = $item['options'];

      if (!empty($options['look_ahead']['eid'])) {
        $eid = $options['look_ahead']['eid'];

        if (!empty($eid) && $eid !== FALSE) {
          $title = '';

          if ($item['link_path'] != '<lookahead>') {
            $url = check_url(url($item['href'], $item['localized_options']));

	        $attributes = (isset($item['localized_options']['attributes'])) ? $item['localized_options']['attributes'] : array();

            $title = '<a href="' . $url . '"' . drupal_attributes($attributes) . '>' . check_plain($item['title']) . '</a> ';
          }
          $message = 'Lookahead type ' . $options['look_ahead']['entity_type'] . ', EID ' . $eid;

          $element['title']['#markup'] = $title . '<div class="lookahead">' . $message . '</div>';
        }
      }
    }
  }
}

function look_ahead_form_menu_edit_item_alter(&$form, &$form_state) {
  _look_ahead_form_alter($form, 'look_ahead_menu_edit_item_validate', 'look_ahead_menu_edit_item_submit', $form, $form_state);
}

function __look_ahead_entity_type_is_enabled($entity_type) {
  $my_data = &drupal_static(__FUNCTION__);
  if (!isset($my_data)) {
    $my_data['enabled_entity_types'] = array_filter(variable_get('look_ahead_entity_types_enabled', array()));
  }

  return in_array($entity_type, $my_data['enabled_entity_types']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds menu views options to the node's edit menu item form.
 *
 * @see _menu_views_form_alter()
 */
function look_ahead_form_node_form_alter(&$form, &$form_state) {
  if (!__look_ahead_entity_type_is_enabled('node')) {
    return;
  }

  if (!isset($form['menu']['link'])) {
    return;
  }

  $element = &$form['menu']['link'];

  _look_ahead_form_alter($element, 'look_ahead_form_node_validate', 'look_ahead_form_node_submit', $form, $form_state);
}

function _look_ahead_form_alter(&$element, $validate_function, $submit_function, &$form, &$form_state) {
  $element['#attached']['js'][] = array(
    'data' => array('look_ahead' => array(
      'admin_theme' => variable_get('admin_theme', 'bartik'),
      'node_form' => isset($form['#node']),
    )),
    'type' => 'setting',
  );

  $element['look_ahead'] = array(
    '#type' => 'fieldset',
    '#title' => t('Look ahead'),
    '#description' => t('Choose whether to enable look-ahead for this menu item.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#prefix' => '<div class="look-ahead">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
  );

  $element['look_ahead']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable look-ahead'),
    '#description' => t('Check the box to enable look-ahead.'),
    '#default_value' => isset($element['options']['#value']['look_ahead']['enabled']) ? $element['options']['#value']['look_ahead']['enabled'] : FALSE,
  );

  $form['#validate'] = array_merge(array($validate_function), $form['#validate']);
  $form['#submit'] = array_merge(array($submit_function), $form['#submit']);
}

function hook_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Move my_module_rdf_mapping() to the end of the list. module_implements()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    $group = $implementations['look_ahead'];
    unset($implementations['look_ahead']);
    $implementations['look_ahead'] = $group;
  }
}

function look_ahead_menu_edit_item_validate($form, &$form_state) {
  $element = &$form_state['values'];

  if (isset($element['original_item'])) {
    look_ahead_menu_edit_item_validate($element, $element['original_item'], $form, $form_state);
  }
}

function look_ahead_form_node_validate($form, &$form_state) {
  look_ahead_menu_edit_item_validate($form_state['values']['menu'], $form['#node']->menu, $form, $form_state);
}

function _look_ahead_menu_item_validate(&$element, $original, $form, &$form_state) {
  //TODO: Implement basic validation
}

function look_ahead_menu_edit_item_submit($form, &$form_state) {
  $element = &$form_state['values'];

  _look_ahead_menu_item_submit($element, $element['original_item'], $form, $form_state);
}

function look_ahead_form_node_submit($form, &$form_state) {
  _look_ahead_menu_item_submit($form_state['values']['menu'], $form['#node']->menu, $form, $form_state);
}

function _look_ahead_menu_item_submit(&$element, $original, $form, &$form_state) {
  $my_data = &drupal_static(__FUNCTION__);
  if (!isset($my_data)) {
    $my_data['enabled_menus'] = array_filter(variable_get('look_ahead_menus_enabled', array()));
  }

  $enabled_menus = $my_data['enabled_menus'];
  $menu_name = $original['menu_name'];

  if (!in_array($menu_name, $enabled_menus)) {
    unset($element['look_ahead']);
    return;
  }

  if (isset($original['link_path'])) {
    $path = explode('/', $original['link_path']);

    if (!entity_resolve_is_entity_path($path)) {
      unset($element['look_ahead']);
      return;
    }

    $entity_type = entity_resolve_get_entity_type_from_path($path);
    $eid = entity_resolve_get_eid_from_path($path);
  } elseif (isset($form['nid'])) {
    $entity_type = 'node';
    $eid = $form['nid']['#value'];
  } else {
    unset($element['look_ahead']);
    return;
  }

  if (!__look_ahead_entity_type_is_enabled($entity_type)) {
    unset($element['look_ahead']);
    return;
  }

  if (isset($element['look_ahead'])) {
    $element['look_ahead']['entity_type'] = $entity_type;
    $element['look_ahead']['eid'] = $eid;
    $element['look_ahead']['mlid'] = $original['mlid'];
    $element['look_ahead']['plid'] = $original['plid'];
    $element['look_ahead']['menu_name'] = $original['menu_name'];

    $element['options']['look_ahead'] = $element['look_ahead'];

    unset($element['look_ahead']);
  }
}